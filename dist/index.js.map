{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;AAEA,iCAA0B;AAC1B,sCAA6D;AAC7D,MAAM,KAAK,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAE5C,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC;AAS3B,MAAM,GAAG,GAAG,IAAI,UAAG,CAAC;IAChB,aAAa,EAAE,OAAO,CAAC,GAAG,CAAC,oBAAoB;IAC/C,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,eAAe;CACrC,CAAC,CAAC;AAEH,MAAM,cAAc,GAAG,CAAO,QAA0C,EAC1C,GAAgB,EAAE,MAAiB,EAAE,EAAE;;IACjE,IAAI,KAAK,GAAmB,EAAE,CAAC;IAC/B,IAAI,EAAE,GAAG,EAAE,CAAC;IACZ,IAAI,OAAO,GAAG,EAAE,CAAC;IAEjB,IAAI,SAAS,IAAI,QAAQ,EAAE;QACvB,KAAK,SAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,mCAAI,EAAoB,CAAC;QACvD,EAAE,SAAG,QAAQ,CAAC,UAAU,mCAAI,EAAE,CAAC;QAC/B,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;KACjC;IAED,IAAG,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QACnB,MAAM,MAAM,GAAG,EAAC,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,iCAAiC,EAAC,CAAC;QAC1F,MAAM,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACtC,OAAO;KACV;SAAK,IAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;QACvB,MAAM,MAAM,GAAG,EAAC,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,6DAA6D,EAAC,CAAC;QACtH,MAAM,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACtC,OAAO;KACV;IAED,IAAI;QACA,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,OAAO,GAAG,EAAC,OAAO,EAAE,EAAC,aAAa,EAAE,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,EAAC,EAAC,CAAC;QACpF,MAAM,YAAY,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QAChE,MAAM,QAAQ,GAAG,YAAY,CAAC,IAAI,CAAC;QACnC,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,QAAQ,GAAG,EAAE,CAAC;QAElB,IAAG,QAAQ,CAAC,WAAW,KAAK,mBAAmB,EAAE;YAC7C,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACxC,MAAM,YAAY,GAAa,EAAE,CAAC;YAClC,IAAI,aAAa,GAAG,CAAC,CAAC;YAEtB,KAAK,MAAM,CAAC,IAAI,KAAK,EAAE;gBACnB,MAAM,OAAO,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;gBACzB,IAAI,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;oBACtC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAC9B;qBAAM;oBACH,aAAa,IAAI,CAAC,CAAC;iBACtB;aACJ;YAED,KAAK,GAAG,0BAA0B,aAAa,cAAc,CAAC;YAC9D,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvC,QAAQ,GAAG,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC;SAC3C;aAAK,IAAG,QAAQ,CAAC,WAAW,KAAK,aAAa,EAAE;YAC7C,MAAM,OAAO,GAAG,KAAK,CAAC,QAAQ,EAAE,EAAC,OAAO,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAC,CAAC,CAAC;YAEzE,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAEvC,IAAG,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;gBACrB,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAC9D,QAAQ,IAAI,OAAO,CAAC;aACvB;YAED,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACvC,KAAK,GAAG,cAAc,CAAC;SAC1B;QAED,MAAM,MAAM,GAAG,EAAC,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,EAAE;YAChC,eAAe,EAAE,KAAK;YACtB,QAAQ,EAAE,QAAQ;YAClB,OAAO,EAAE,YAAY,EAAC,CAAC;QACvC,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAEvD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KACtB;IAAA,OAAM,CAAC,EAAE;QACN,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KACpB;IAED,MAAM,GAAG,EAAE,CAAC;AAChB,CAAC,CAAA,CAAC;AAEF,GAAG,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAO,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAC,EAAE,EAAE;IAChE,MAAM,cAAc,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;AAChD,CAAC,CAAA,CAAC,CAAC;AAEH,GAAG,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAO,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAC,EAAE,EAAE;IACtE,MAAM,cAAc,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;AAChD,CAAC,CAAA,CAAC,CAAC;AAEH,CAAC,GAAS,EAAE;IACR,gBAAgB;IAChB,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;IAE1C,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;AAC3C,CAAC,CAAA,CAAC,EAAE,CAAC","sourcesContent":["import {AckFn, GlobalShortcut, MessageShortcut} from '@slack/bolt/dist/types';\nimport {WebClient} from '@slack/web-api'\nimport axios from 'axios';\nimport {App, SlackShortcutMiddlewareArgs} from '@slack/bolt';\nconst parse = require('csv-parse/lib/sync');\n\nrequire('dotenv').config();\n\n\ninterface IFileMessage {\n    id: string;\n    url_private: string;\n    name: string;\n}\n\nconst app = new App({\n    signingSecret: process.env.SLACK_SIGNING_SECRET,\n    token: process.env.SLACK_BOT_TOKEN,\n});\n\nconst handleShortcut = async (shortcut: GlobalShortcut | MessageShortcut,\n                              ack: AckFn<void>, client: WebClient) => {\n    let files: IFileMessage[] = [];\n    let ts = '';\n    let channel = '';\n\n    if ('message' in shortcut) {\n        files = shortcut.message.files ?? [] as IFileMessage[];\n        ts = shortcut.message_ts ?? '';\n        channel = shortcut.channel.id;\n    }\n\n    if(files.length === 0) {\n        const params = {channel: channel, thread_ts: ts, text: 'Sorry! You must include a file.'};\n        await client.chat.postMessage(params);\n        return;\n    }else if(files.length > 1) {\n        const params = {channel: channel, thread_ts: ts, text: 'Sorry! I\\'m new here and can only work on 1 file at a time.'};\n        await client.chat.postMessage(params);\n        return;\n    }\n\n    try {\n        const file = files[0];\n        const headers = {headers: {Authorization: 'Bearer ' + process.env.SLACK_BOT_TOKEN}};\n        const fileResponse = await axios.get(file.url_private, headers);\n        const fileData = fileResponse.data;\n        let reply = '';\n        let fileContents = '';\n        let fileName = '';\n\n        if(shortcut.callback_id === 'remove_duplicates') {\n            const lines = fileData.split(/[\\r\\n]+/);\n            const noDuplicates: string[] = [];\n            let numDuplicates = 0;\n\n            for (const l of lines) {\n                const trimmed = l.trim();\n                if (noDuplicates.indexOf(trimmed) === -1) {\n                    noDuplicates.push(trimmed);\n                } else {\n                    numDuplicates += 1;\n                }\n            }\n\n            reply = `Here you go! I removed ${numDuplicates} duplicates.`;\n            fileContents = noDuplicates.join('\\n');\n            fileName = 'no_duplicates_' + file.name;\n        }else if(shortcut.callback_id === 'csv_to_json') {\n            const csvData = parse(fileData, {columns: true, skip_empty_lines: true});\n\n            const fileParts = file.name.split('.');\n\n            if(fileParts.length > 1) {\n                fileName = fileParts.slice(0, fileParts.length - 1).join('.');\n                fileName += '.json';\n            }\n\n            fileContents = JSON.stringify(csvData);\n            reply = `Here you go!`;\n        }\n\n        const params = {channels: channel, thread_ts: ts,\n                        initial_comment: reply,\n                        filename: fileName,\n                        content: fileContents};\n        const uploadResult = await client.files.upload(params);\n\n        console.log(reply);\n    }catch(e) {\n        console.error(e);\n    }\n\n    await ack();\n};\n\napp.shortcut('csv_to_json', async ({ shortcut, ack, client, say}) => {\n    await handleShortcut(shortcut, ack, client);\n});\n\napp.shortcut('remove_duplicates', async ({ shortcut, ack, client, say}) => {\n    await handleShortcut(shortcut, ack, client);\n});\n\n(async () => {\n    // Start the app\n    await app.start(process.env.PORT || 3000);\n\n    console.log('⚡️ Bolt app is running!');\n})();"]}